saved: ralph\.wen@gmail\.com
saved: yadongwen/ClipBoard
recent:ClipBoard
recent:2\.4\.question1
recent://bop\ 2\.4\.question1\r\n\r\npackage\ com\.ralphwen;\r\n\r\npublic\ class\ Main\ \{\r\n\r\n\ \ \ \ //\ O\(log\(n\)\)\r\n\ \ \ \ //\ easier\ to\ understand\ with\ recursion\r\n\ \ \ \ public\ static\ long\ countOne\(long\ n\)\ \{\r\n\ \ \ \ \ \ \ \ if\(n\ <=\ 0\)\ return\ 0;\r\n\ \ \ \ \ \ \ \ if\(n\ <\ 10\)\ return\ 1;\r\n\ \ \ \ \ \ \ \ long\ d\ =\ n;\r\n\ \ \ \ \ \ \ \ int\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ int\ p\ =\ 1;\r\n\ \ \ \ \ \ \ \ while\ \(d/10\ >\ 0\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ d\ /=\ 10;\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\+\+;\r\n\ \ \ \ \ \ \ \ \ \ \ \ p\ \*=\ 10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ //\ d\ is\ the\ first\ digit\ now\r\n\ \ \ \ \ \ \ \ //\ c\ is\ number\ of\ digits\ after\ d\r\n\ \ \ \ \ \ \ \ //\ p\ is\ smallest\ number\ with\ same\ length\ as\ n\r\n\ \ \ \ \ \ \ \ long\ r\ =\ n\ -\ d\ \*\ p;\r\n\ \ \ \ \ \ \ \ long\ rc\ =\ countOne\(r\);\r\n\ \ \ \ \ \ \ \ if\(d\ ==\ 1\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ rc\ \+\ r\ \+\ 1\ \+\ p\*c/10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ rc\ \+\ p\*c/10\*d\ \+\ p;\r\n\ \ \ \ }\r\n\r\n\ \ \ \ //\ O\(nlog\(n\)\)\r\n\ \ \ \ public\ static\ long\ countOne2\(long\ n\)\ \{\r\n\ \ \ \ \ \ \ \ int\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ for\(int\ i\ =\ 1;\ i\ <=\ n;\ i\+\+\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\ \+=\ cnt\(i\);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ c;\r\n\ \ \ \ }\r\n\ \ \ \ private\ static\ long\ cnt\(long\ n\)\ \{\r\n\ \ \ \ \ \ \ \ assert\ n\ >\ 0;\r\n\ \ \ \ \ \ \ \ int\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ while\(n!=0\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\ \+=\ n\ %\ 10\ ==\ 1\ \?\ 1\ :\ 0;\r\n\ \ \ \ \ \ \ \ \ \ \ \ n\ /=\ 10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ c;\r\n\ \ \ \ }\r\n\r\n\ \ \ \ public\ static\ void\ main\(final\ String\.\.\.\ args\)\ \{\r\n\ \ \ \ \ \ \ \ long\[]\ t\ =\ new\ long\[]\{-1L,\ -10000L,\ 0L,\ 1L,\ 2L,\ 8L,\ 10L,\ 16L,\ 23L,\ 78L,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 100L,\ 143L,\ 11113L,\ 4124556L,\ 107832489123L};\r\n\ \ \ \ \ \ \ \ for\(long\ tt\ :\ t\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ System\.out\.println\(tt\ \+\ "\ :\ "\ \+\ countOne\(tt\)\ \+\ ",\ "\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \+\ countOne2\(tt\)\ \+\ ","\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \+\ \(countOne\(tt\)\ ==\ countOne2\(tt\)\)\);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n}
recent:countOne\(tt\)\ \+\ countOne2\(tt\)\)
recent://bop\ 2\.4\r\n\r\npublic\ class\ Solution\ \{\r\n\r\n\ \ \ \ //\ O\(log\(n\)\)\r\n\ \ \ \ public\ static\ long\ countOne\(long\ n\)\ \{\r\n\ \ \ \ \ \ \ \ if\(n\ <=\ 0\)\ return\ 0;\r\n\ \ \ \ \ \ \ \ if\(n\ <\ 10\)\ return\ 1;\r\n\ \ \ \ \ \ \ \ long\ d\ =\ \(n/10\)\*10;\r\n\ \ \ \ \ \ \ \ long\ r\ =\ n-d;\r\n\ \ \ \ \ \ \ \ long\ d1\ =\ d;\r\n\ \ \ \ \ \ \ \ long\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ long\ p\ =\ 1;\r\n\ \ \ \ \ \ \ \ while\(d1/10!=0\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ d1/=10;\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\+\+;\r\n\ \ \ \ \ \ \ \ \ \ \ \ p\ \*=\ 10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if\(d1\ ==\ 1\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ countOne\(r\)\ \+\ r\ \+\ 1\ \+\ p\*c/10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ countOne\(r\)\ \+\ p\*c/10\*d1\ \+\ p;\r\n\ \ \ \ }\r\n\r\n\ \ \ \ //\ O\(nlog\(n\)\)\r\n\ \ \ \ public\ static\ long\ countOne2\(long\ n\)\ \{\r\n\ \ \ \ \ \ \ \ int\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ for\(int\ i\ =\ 1;\ i\ <=\ n;\ i\+\+\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\ \+=\ cnt\(i\);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ c;\r\n\ \ \ \ }\r\n\ \ \ \ private\ static\ long\ cnt\(long\ n\)\ \{\r\n\ \ \ \ \ \ \ \ assert\ n\ >\ 0;\r\n\ \ \ \ \ \ \ \ int\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ while\(n!=0\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\ \+=\ n\ %\ 10\ ==\ 1\ \?\ 1\ :\ 0;\r\n\ \ \ \ \ \ \ \ \ \ \ \ n\ /=\ 10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ c;\r\n\ \ \ \ }\r\n\r\n\ \ \ \ public\ static\ void\ main\(final\ String\.\.\.\ args\)\ \{\r\n\ \ \ \ \ \ \ \ long\[]\ t\ =\ new\ long\[]\{-1L,\ -10000L,\ 0L,\ 1L,\ 2L,\ 8L,\ 10L,\ 16L,\ 23L,\ 78L,\ 100L,\ 143L,\ 11113L,\ 107832489123L};\r\n\ \ \ \ \ \ \ \ for\(long\ tt\ :\ t\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ System\.out\.print\(tt\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ System\.out\.println\("\ :\ "\ \+\ \(countOne\(tt\)==countOne2\(tt\)\)\);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n}
recent:Solution
recent:long\[]\ t\ =\ new\ long\[]\{-1L,\ -10000L,\ 0L,\ 1L,\ 2L,\ 8L,\ 10L,\ 16L,\ 23L,\ 78L,\ 100L,\ 143L,\ 11113L,\ 107832489123L};\r\n\ \ \ \ \ \ \ \ for\(long\ tt\ :\ t\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ System\.out\.print\(tt\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ System\.out\.println\("\ :\ "\ \+\ \(countOne\(tt\)==countOne2\(tt\)\)\);\r\n\ \ \ \ \ \ \ \ }
recent://bop\ 2\.4\r\n\r\npublic\ class\ Solution\ \{\r\n\r\n\ \ \ \ //\ O\(log\(n\)\)\r\n\ \ \ \ public\ static\ long\ countOne\(long\ n\)\ \{\r\n\ \ \ \ \ \ \ \ if\(n\ <=\ 0\)\ return\ 0;\r\n\ \ \ \ \ \ \ \ if\(n\ <\ 10\)\ return\ 1;\r\n\ \ \ \ \ \ \ \ long\ d\ =\ \(n/10\)\*10;\r\n\ \ \ \ \ \ \ \ long\ r\ =\ n-d;\r\n\ \ \ \ \ \ \ \ long\ d1\ =\ d;\r\n\ \ \ \ \ \ \ \ long\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ long\ p\ =\ 1;\r\n\ \ \ \ \ \ \ \ while\(d1/10!=0\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ d1/=10;\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\+\+;\r\n\ \ \ \ \ \ \ \ \ \ \ \ p\ \*=\ 10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if\(d1\ ==\ 1\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ countOne\(r\)\ \+\ r\ \+\ 1\ \+\ p\*c/10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ countOne\(r\)\ \+\ p\*c/10\*d1\ \+\ p;\r\n\ \ \ \ }\r\n\r\n\ \ \ \ //\ O\(nlog\(n\)\)\r\n\ \ \ \ public\ static\ long\ countOne2\(long\ n\)\ \{\r\n\ \ \ \ \ \ \ \ int\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ for\(int\ i\ =\ 1;\ i\ <=\ n;\ i\+\+\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\ \+=\ cnt\(i\);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ c;\r\n\ \ \ \ }\r\n\ \ \ \ private\ static\ long\ cnt\(long\ n\)\ \{\r\n\ \ \ \ \ \ \ \ assert\ n\ >\ 0;\r\n\ \ \ \ \ \ \ \ int\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ while\(n!=0\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\ \+=\ n\ %\ 10\ ==\ 1\ \?\ 1\ :\ 0;\r\n\ \ \ \ \ \ \ \ \ \ \ \ n\ /=\ 10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ c;\r\n\ \ \ \ }\r\n\r\n\ \ \ \ public\ static\ void\ main\(final\ String\.\.\.\ args\)\ \{\r\n\ \ \ \ \ \ \ \ long\[]\ t\ =\ new\ long\[]\{-1L,\ -10000L,\ 0L,\ 1L,\ 2L,\ 8L,\ 10L,\ 16L,\ 23L,\ 78L,\ 100L,\ 143L,\ 11113L,\ 107832489123L};\r\n\ \ \ \ \ \ \ \ for\(long\ tt\ :\ t\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ System\.out\.print\(tt\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ System\.out\.println\("\ :\ "\ \+\ countOne\(tt\)==countOne2\(tt\)\);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n}
recent://bop\ 2\.4\r\n\r\npublic\ class\ Solution\ \{\r\n\r\n\ \ \ \ //\ O\(log\(n\)\)\r\n\ \ \ \ public\ static\ long\ countOne\(long\ n\)\ \{\r\n\ \ \ \ \ \ \ \ if\(n\ <=\ 0\)\ return\ 0;\r\n\ \ \ \ \ \ \ \ if\(n\ <\ 10\)\ return\ 1;\r\n\ \ \ \ \ \ \ \ long\ d\ =\ \(n/10\)\*10;\r\n\ \ \ \ \ \ \ \ long\ r\ =\ n-d;\r\n\ \ \ \ \ \ \ \ long\ d1\ =\ d;\r\n\ \ \ \ \ \ \ \ long\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ long\ p\ =\ 1;\r\n\ \ \ \ \ \ \ \ while\(d1/10!=0\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ d1/=10;\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\+\+;\r\n\ \ \ \ \ \ \ \ \ \ \ \ p\ \*=\ 10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if\(d1\ ==\ 1\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ countOne\(r\)\ \+\ r\ \+\ 1\ \+\ p\*c/10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ countOne\(r\)\ \+\ p\*c/10\*d1\ \+\ p;\r\n\ \ \ \ }\r\n\r\n\ \ \ \ //\ O\(nlog\(n\)\)\r\n\ \ \ \ public\ static\ long\ countOne2\(long\ n\)\ \{\r\n\ \ \ \ \ \ \ \ int\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ for\(int\ i\ =\ 1;\ i\ <=\ n;\ i\+\+\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\ \+=\ cnt\(i\);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ c;\r\n\ \ \ \ }\r\n\ \ \ \ private\ static\ long\ cnt\(long\ n\)\ \{\r\n\ \ \ \ \ \ \ \ assert\ n\ >\ 0;\r\n\ \ \ \ \ \ \ \ int\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ while\(n!=0\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\ \+=\ n\ %\ 10\ ==\ 1\ \?\ 1\ :\ 0;\r\n\ \ \ \ \ \ \ \ \ \ \ \ n\ /=\ 10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ c;\r\n\ \ \ \ }\r\n\r\n\ \ \ \ public\ static\ void\ main\(final\ String\.\.\.\ args\)\ \{\r\n\ \ \ \ \ \ \ \ long\[]\ t\ =\ new\ long\[]\{-1L,\ -10000L,\ 0L,\ 1L,\ 2L,\ 8L,\ 10L,\ 16L,\ 23L,\ 78L,\ 100L,\ 143L,\ 11113L,\ 107832489123L};\r\n\ \ \ \ \ \ \ \ for\(long\ tt\ :\ t\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ System\.out\.print\(tt\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ System\.out\.println\("\ :\ ",\ countOne\(tt\)==countOne2\(tt\)\);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n}
recent:L
recent://bop\ 2\.4\r\n\r\npublic\ class\ Solution\ \{\r\n\r\n\ \ \ \ //\ O\(log\(n\)\)\r\n\ \ \ \ public\ static\ long\ countOne\(long\ n\)\ \{\r\n\ \ \ \ \ \ \ \ if\(n\ <=\ 0\)\ return\ 0;\r\n\ \ \ \ \ \ \ \ if\(n\ <\ 10\)\ return\ 1;\r\n\ \ \ \ \ \ \ \ long\ d\ =\ \(n/10\)\*10;\r\n\ \ \ \ \ \ \ \ long\ r\ =\ n-d;\r\n\ \ \ \ \ \ \ \ long\ d1\ =\ d;\r\n\ \ \ \ \ \ \ \ long\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ long\ p\ =\ 1;\r\n\ \ \ \ \ \ \ \ while\(d1/10!=0\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ d1/=10;\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\+\+;\r\n\ \ \ \ \ \ \ \ \ \ \ \ p\ \*=\ 10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if\(d1\ ==\ 1\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ countOne\(r\)\ \+\ r\ \+\ 1\ \+\ p\*c/10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ countOne\(r\)\ \+\ p\*c/10\*d1\ \+\ p;\r\n\ \ \ \ }\r\n\r\n\ \ \ \ //\ O\(nlog\(n\)\)\r\n\ \ \ \ public\ static\ long\ countOne2\(long\ n\)\ \{\r\n\ \ \ \ \ \ \ \ int\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ for\(int\ i\ =\ 1;\ i\ <=\ n;\ i\+\+\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\ \+=\ cnt\(i\);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ c;\r\n\ \ \ \ }\r\n\ \ \ \ private\ static\ long\ cnt\(long\ n\)\ \{\r\n\ \ \ \ \ \ \ \ assert\ n\ >\ 0;\r\n\ \ \ \ \ \ \ \ int\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ while\(n!=0\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\ \+=\ n\ %\ 10\ ==\ 1\ \?\ 1\ :\ 0;\r\n\ \ \ \ \ \ \ \ \ \ \ \ n\ /=\ 10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ c;\r\n\ \ \ \ }\r\n\r\n\ \ \ \ public\ static\ void\ main\(final\ String\.\.\.\ args\)\ \{\r\n\ \ \ \ \ \ \ \ long\[]\ t\ =\ new\ long\[]\{-1,\ -10000,\ 0,\ 1,\ 2,\ 8,\ 10,\ 16,\ 23,\ 78,\ 100,\ 143,\ 11113,\ 107832489123};\r\n\ \ \ \ \ \ \ \ for\(long\ tt\ :\ t\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ System\.out\.print\(tt\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ System\.out\.println\("\ :\ ",\ countOne\(tt\)==countOne2\(tt\)\);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n}
recent:System\.out\.print\(
recent://bop\ 2\.4\r\n\r\npublic\ class\ Solution\ \{\r\n\ \ \ \ public\ static\ long\ countOne\(long\ n\)\ \{\r\n\ \ \ \ \ \ \ \ if\(n\ <=\ 0\)\ return\ 0;\r\n\ \ \ \ \ \ \ \ if\(n\ <\ 10\)\ return\ 1;\r\n\ \ \ \ \ \ \ \ long\ d\ =\ \(n/10\)\*10;\r\n\ \ \ \ \ \ \ \ long\ r\ =\ n-d;\r\n\ \ \ \ \ \ \ \ long\ d1\ =\ d;\r\n\ \ \ \ \ \ \ \ long\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ long\ p\ =\ 1;\r\n\ \ \ \ \ \ \ \ while\(d1/10!=0\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ d1/=10;\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\+\+;\r\n\ \ \ \ \ \ \ \ \ \ \ \ p\ \*=\ 10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if\(d1\ ==\ 1\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ countOne\(r\)\ \+\ r\ \+\ 1\ \+\ p\*c/10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ return\ countOne\(r\)\ \+\ p\*c/10\*d1\ \+\ p;\r\n\ \ \ \ }\r\n}
recent:long
recent://bop\ 2\.4\r\n\r\npublic\ class\ Solution\ \{\r\n\ \ \ \ public\ static\ int\ countOne\(int\ n\)\ \{\r\n\ \ \ \ \ \ \ \ if\(n\ <=\ 0\)\ return\ 0;\r\n\ \ \ \ \ \ \ \ if\(n\ <\ 10\)\ return\ 1;\r\n\ \ \ \ \ \ \ \ int\ d\ =\ \(n/10\)\*10;\r\n\ \ \ \ \ \ \ \ int\ r\ =\ n-d;\r\n\ \ \ \ \ \ \ \ int\ d1\ =\ d;\r\n\ \ \ \ \ \ \ \ int\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ int\ p\ =\ 1;\r\n\ \ \ \ \ \ \ \ while\(d1/10!=0\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ d1/=10;\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\+\+;\r\n\ \ \ \ \ \ \ \ \ \ \ \ p\ \*=\ 10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if\(d1\ ==\ 1\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ countOne\(r\)\ \+\ r\ \+\ 1\ \+\ p\*c/10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ return\ countOne\(r\)\ \+\ p\*c/10\*d1\ \+\ p;\r\n\ \ \ \ }\r\n}
recent://bop\ 2\.4\r\n\r\npublic\ class\ Solution\ \{\r\n\ \ \ \ public\ static\ int\ countOne\(int\ n\)\ \{\r\n\ \ \ \ \ \ \ \ if\(n\ <=\ 0\)\ return\ 0;\r\n\ \ \ \ \ \ \ \ if\(n\ <\ 10\)\ return\ 1;\r\n\ \ \ \ \ \ \ \ int\ d\ =\ \(n/10\)\*10;\r\n\ \ \ \ \ \ \ \ int\ r\ =\ n-d;\r\n\ \ \ \ \ \ \ \ int\ d1\ =\ d;\r\n\ \ \ \ \ \ \ \ int\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ int\ p\ =\ 1;\r\n\ \ \ \ \ \ \ \ while\(d1/10!=0\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ d1/=10;\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\+\+;\r\n\ \ \ \ \ \ \ \ \ \ \ \ p\ \*=\ 10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if\(d1\ ==\ 1\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ countOne\(r\)\ \+\ 1\ \+\ p\*c/10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ return\ countOne\(r\)\ \+\ p\*c/10\*d1\ \+\ p;\r\n\ \ \ \ }\r\n}
recent://bop\ 2\.4\r\n\r\npublic\ class\ Solution\ \{\r\n\ \ \ \ public\ static\ int\ countOne\(int\ n\)\ \{\r\n\ \ \ \ \ \ \ \ assert\ n\ >\ 0;\r\n\ \ \ \ \ \ \ \ if\(n\ <\ 10\)\ return\ 1;\r\n\ \ \ \ \ \ \ \ int\ d\ =\ \(n/10\)\*10;\r\n\ \ \ \ \ \ \ \ int\ r\ =\ n-d;\r\n\ \ \ \ \ \ \ \ int\ d1\ =\ d;\r\n\ \ \ \ \ \ \ \ int\ c\ =\ 0;\r\n\ \ \ \ \ \ \ \ int\ p\ =\ 1;\r\n\ \ \ \ \ \ \ \ while\(d1/10!=0\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ d1/=10;\r\n\ \ \ \ \ \ \ \ \ \ \ \ c\+\+;\r\n\ \ \ \ \ \ \ \ \ \ \ \ p\ \*=\ 10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if\(d1\ ==\ 1\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ countOne\(r\)\ \+\ 1\ \+\ p\*c/10;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ return\ countOne\(r\)\ \+\ p\*c/10\*d1\ \+\ p;\r\n\ \ \ \ }\r\n}
recent:2\.3\.extended
recent://bop\ 2\.3\.extended\r\n\r\nimport\ java\.util\.HashMap;\r\n\r\nclass\ User\ \{\r\n\ \ \ \ int\ id;\r\n}\r\nclass\ Post\ \{\r\n\ \ \ \ User\ author;\r\n\ \ \ \ User\[]\ commenters;\r\n}\r\n\r\npublic\ class\ Solution\ \{\r\n\ \ \ \ //method\ 1\ -\ use\ map\ if\ number\ of\ ids\ is\ small\.\r\n\ \ \ \ //time\ complexity\ is\ still\ O\(n\)\r\n\ \ \ \ public\ static\ int\[]\ topThree\(int\[]\ ids\)\ \{\r\n\ \ \ \ \ \ \ \ HashMap<Integer,\ Integer>\ map\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ =\ new\ HashMap<Integer,\ Integer>\(\);\r\n\ \ \ \ \ \ \ \ for\(int\ id\ :\ ids\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\(!map\.containsKey\(id\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ map\.put\(id,\ 1\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\ else\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ map\.put\(id,\ map\.get\(id\)\ \+\ 1\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ int\ r\[]\ =\ new\ int\[3];\r\n\ \ \ \ \ \ \ \ int\ k;\r\n\ \ \ \ \ \ \ \ k\ =\ getTop\(map\);\r\n\ \ \ \ \ \ \ \ r\[0]\ =\ map\.get\(k\);\r\n\ \ \ \ \ \ \ \ map\.remove\(k\);\r\n\ \ \ \ \ \ \ \ k\ =\ getTop\(map\);\r\n\ \ \ \ \ \ \ \ r\[1]\ =\ map\.get\(k\);\r\n\ \ \ \ \ \ \ \ map\.remove\(k\);\r\n\ \ \ \ \ \ \ \ k\ =\ getTop\(map\);\r\n\ \ \ \ \ \ \ \ r\[2]\ =\ map\.get\(k\);\r\n\ \ \ \ \ \ \ \ map\.remove\(k\);\r\n\ \ \ \ \ \ \ \ return\ r;\r\n\ \ \ \ }\r\n\ \ \ \ private\ static\ int\ getTop\(HashMap<Integer,\ Integer>\ map\)\ \{\r\n\ \ \ \ \ \ \ \ int\ max\ =\ 0;\r\n\ \ \ \ \ \ \ \ int\ maxk\ =\ -1;\r\n\ \ \ \ \ \ \ \ for\(int\ k\ :\ map\.keySet\(\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ int\ v\ =\ map\.get\(k\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\(v\ >\ max\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ max\ =\ v;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ maxk\ =\ k;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ maxk;\r\n\ \ \ \ }\r\n}
recent://bop\ 2\.3\.extended\r\n\r\nimport\ java\.util\.HashMap;\r\n\r\nclass\ User\ \{\r\n\ \ \ \ int\ id;\r\n}\r\nclass\ Post\ \{\r\n\ \ \ \ User\ author;\r\n\ \ \ \ User\[]\ commenters;\r\n}\r\n\r\npublic\ class\ Solution\ \{\r\n\ \ \ \ //method\ 1\ -\ use\ map\ if\ number\ of\ ids\ is\ small\.\r\n\ \ \ \ //time\ complexity\ is\ still\ O\(n\)\r\n\ \ \ \ public\ static\ int\[]\ top3\(int\[]\ ids\)\ \{\r\n\ \ \ \ \ \ \ \ HashMap<Integer,\ Integer>\ map\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ =\ new\ HashMap<Integer,\ Integer>\(\);\r\n\ \ \ \ \ \ \ \ for\(int\ id\ :\ ids\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\(!map\.containsKey\(id\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ map\.put\(id,\ 1\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\ else\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ map\.put\(id,\ map\.get\(id\)\ \+\ 1\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ int\ r\[]\ =\ new\ int\[3];\r\n\ \ \ \ \ \ \ \ int\ k;\r\n\ \ \ \ \ \ \ \ k\ =\ getTop\(map\);\r\n\ \ \ \ \ \ \ \ r\[0]\ =\ map\.get\(k\);\r\n\ \ \ \ \ \ \ \ map\.remove\(k\);\r\n\ \ \ \ \ \ \ \ k\ =\ getTop\(map\);\r\n\ \ \ \ \ \ \ \ r\[1]\ =\ map\.get\(k\);\r\n\ \ \ \ \ \ \ \ map\.remove\(k\);\r\n\ \ \ \ \ \ \ \ k\ =\ getTop\(map\);\r\n\ \ \ \ \ \ \ \ r\[2]\ =\ map\.get\(k\);\r\n\ \ \ \ \ \ \ \ map\.remove\(k\);\r\n\ \ \ \ \ \ \ \ return\ r;\r\n\ \ \ \ }\r\n\ \ \ \ private\ static\ int\ getTop\(HashMap<Integer,\ Integer>\ map\)\ \{\r\n\ \ \ \ \ \ \ \ int\ max\ =\ 0;\r\n\ \ \ \ \ \ \ \ int\ maxk\ =\ -1;\r\n\ \ \ \ \ \ \ \ for\(int\ k\ :\ map\.keySet\(\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ int\ v\ =\ map\.get\(k\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\(v\ >\ max\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ max\ =\ v;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ maxk\ =\ k;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ maxk;\r\n\ \ \ \ }\r\n}
recent:map\.get\(k\)
recent:k\ =\ getTop\(map\);\r\n\ \ \ \ \ \ \ \ r\[0]\ =\ map\.get\(k\);\r\n\ \ \ \ \ \ \ \ map\.remove\(k\);\r\n\ \ \ \ \ \ \ \ 
recent:k\ =\ getTop\(map\);\r\n\ \ \ \ \ \ \ \ 
recent:2\.3
recent://bop\ 2\.3\r\n\r\nimport\ java\.util\.HashSet;\r\n\r\nclass\ User\ \{\r\n\ \ \ \ int\ id;\r\n}\r\nclass\ Post\ \{\r\n\ \ \ \ User\ author;\r\n\ \ \ \ User\[]\ commenters;\r\n}\r\n\r\npublic\ class\ Solution\ \{\r\n\ \ \ \ //method\ 1\ -\ use\ two\ sets\r\n\ \ \ \ public\ static\ int\ findMostActive\(Post\[]\ posts\)\ \{\r\n\ \ \ \ \ \ \ \ if\(posts\.length==0\)\ return\ -1;\r\n\ \ \ \ \ \ \ \ HashSet<User>\ freq\ =\ new\ HashSet<User>\(\);\r\n\ \ \ \ \ \ \ \ freq\.add\(posts\[0]\.author\);\r\n\ \ \ \ \ \ \ \ for\(User\ u\ :\ posts\[0]\.commenters\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ freq\.add\(u\);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ for\(int\ i\ =\ 1;\ i\ <\ posts\.length;\ i\+\+\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ HashSet<User>\ curr\ =\ new\ HashSet<User>\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ curr\.add\(posts\[0]\.author\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ for\(User\ u\ :\ posts\[i]\.commenters\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ curr\.add\(u\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ Iterator\ iter\ =\ freq\.iterator\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ while\(iter\.hasNext\(\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\(!curr\.contains\(iter\.next\(\)\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ iter\.remove\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ while\(freq\.size\(\)\ <=\ 1\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ break;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if\(freq\.isEmpty\(\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ -1;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ \(\(User\)\(freq\.toArray\(\)\)\[0]\)\.id;\r\n\ \ \ \ }\r\n\r\n\ \ \ \ //method\ 2\.\ remove\ diff\ pairs\r\n\ \ \ \ public\ static\ int\ findMostActive\(int\[]\ ids\)\ \{\r\n\ \ \ \ \ \ \ \ if\(ids\.length==0\)\ return\ -1;\r\n\ \ \ \ \ \ \ \ int\ cnt\ =\ 0;\r\n\ \ \ \ \ \ \ \ int\ curr\ =\ 0;\r\n\ \ \ \ \ \ \ \ for\(int\ i\ =\ 0;\ i\ <\ ids\.length;\ i\+\+\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\(cnt\ ==\ 0\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ curr\ =\ i;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\(ids\[i]\ ==\ ids\[curr]\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ cnt\+\+;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\ else\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ cnt--;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ ids\[curr];\r\n\ \ \ \ }\r\n}
recent://bop\ 2\.3\r\n\r\nimport\ java\.util\.HashSet;\r\n\r\nclass\ User\ \{\r\n\ \ \ \ int\ id;\r\n}\r\nclass\ Post\ \{\r\n\ \ \ \ User\ author;\r\n\ \ \ \ User\[]\ commenters;\r\n}\r\n\r\npublic\ class\ Solution\ \{\r\n\ \ \ \ //method\ 1\ -\ use\ two\ sets\r\n\ \ \ \ public\ static\ int\ findMostActive\(Post\[]\ posts\)\ \{\r\n\ \ \ \ \ \ \ \ if\(posts\.length==0\)\ return\ -1;\r\n\ \ \ \ \ \ \ \ HashSet<User>\ freq\ =\ new\ HashSet<User>\(\);\r\n\ \ \ \ \ \ \ \ freq\.add\(posts\[0]\.author\);\r\n\ \ \ \ \ \ \ \ for\(User\ u\ :\ posts\[0]\.commenters\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ freq\.add\(u\);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ for\(int\ i\ =\ 1;\ i\ <\ posts\.length;\ i\+\+\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ HashSet<User>\ curr\ =\ new\ HashSet<User>\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ curr\.add\(posts\[0]\.author\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ for\(User\ u\ :\ posts\[i]\.commenters\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ curr\.add\(u\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ Iterator\ iter\ =\ freq\.iterator\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ while\(iter\.hasNext\(\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\(!curr\.contains\(iter\.next\(\)\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ iter\.remove\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ while\(freq\.size\(\)\ <=\ 1\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ break;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if\(freq\.isEmpty\(\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ -1;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ \(\(User\)\(freq\.toArray\(\)\)\[0]\)\.id;\r\n\ \ \ \ }\r\n}
recent://bop\ 2\.3\r\n\r\nimport\ java\.util\.HashSet;\r\n\r\nclass\ User\ \{\r\n\ \ \ \ int\ id;\r\n}\r\nclass\ Post\ \{\r\n\ \ \ \ User\ author;\r\n\ \ \ \ User\[]\ commenters;\r\n}\r\n\r\npublic\ class\ Solution\ \{\r\n\ \ \ \ //method\ 1\ -\ use\ two\ sets\r\n\ \ \ \ public\ static\ int\ findMostActive\(Post\[]\ posts\)\ \{\r\n\ \ \ \ \ \ \ \ if\(posts\.length==0\)\ return\ -1;\r\n\ \ \ \ \ \ \ \ HashSet<User>\ freq\ =\ new\ HashSet<User>\(\);\r\n\ \ \ \ \ \ \ \ freq\.add\(posts\[0]\.author\);\r\n\ \ \ \ \ \ \ \ for\(User\ u\ :\ posts\[0]\.commenters\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ freq\.add\(u\);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ for\(int\ i\ =\ 1;\ i\ <\ posts\.length;\ i\+\+\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ HashSet<User>\ curr\ =\ new\ HashSet<User>\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ curr\.add\(posts\[0]\.author\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ for\(User\ u\ :\ posts\[i]\.commenters\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ curr\.add\(u\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ Iterator\ iter\ =\ freq\.iterator\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ while\(iter\.hasNext\(\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\(!curr\.contains\(iter\.next\(\)\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ iter\.remove\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ while\(freq\.size\(\)\ <=\ 1\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ break;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if\(freq\.isEmpty\(\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ -1;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ \(User\)\(freq\.toArray\(\)\)\[0]\.id;\r\n\ \ \ \ }\r\n}
recent://bop\ 2\.3\r\n\r\nimport\ java\.util\.HashSet;\r\n\r\nclass\ User\ \{\r\n\ \ \ \ int\ id;\r\n}\r\nclass\ Post\ \{\r\n\ \ \ \ User\ author;\r\n\ \ \ \ User\[]\ commenters;\r\n}\r\n\r\npublic\ class\ Solution\ \{\r\n\ \ \ \ //method\ 1\ -\ use\ two\ sets\r\n\ \ \ \ public\ static\ int\ findMostActive\(Post\[]\ posts\)\ \{\r\n\ \ \ \ \ \ \ \ if\(posts\.length==0\)\ return\ -1;\r\n\ \ \ \ \ \ \ \ HashSet<User>\ freq\ =\ new\ HashSet<User>\(\);\r\n\ \ \ \ \ \ \ \ freq\.add\(posts\[0]\.author\);\r\n\ \ \ \ \ \ \ \ for\(User\ u\ :\ posts\[0]\.commenters\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ freq\.add\(u\);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ for\(int\ i\ =\ 1;\ i\ <\ posts\.length;\ i\+\+\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ HashSet<User>\ curr\ =\ new\ HashSet<User>\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ curr\.add\(posts\[0]\.author\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ for\(User\ u\ :\ posts\[i]\.commenters\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ curr\.add\(u\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ Iterator\ iter\ =\ freq\.iterator\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ while\(iter\.hasNext\(\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\(!curr\.contains\(iter\.next\(\)\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ iter\.remove\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ while\(freq\.size\(\)\ <=\ 1\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ break;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if\(freq\.isEmpty\(\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ -1;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ \(User\)\(freq\.toArray\(\)\)\[0];\r\n\ \ \ \ }\r\n}
recent://bop\ 2\.3\r\n\r\nimport\ java\.util\.HashSet;\r\n\r\nclass\ Post\ \{\r\n\ \ \ \ User\ author;\r\n\ \ \ \ User\[]\ commenters;\r\n}\r\nclass\ User\ \{\r\n\ \ \ \ int\ id;\r\n}\r\n\r\npublic\ class\ Solution\ \{\r\n\ \ \ \ //method\ 1\ -\ use\ two\ sets\r\n\ \ \ \ public\ static\ int\ findMostActive\(Post\[]\ posts\)\ \{\r\n\ \ \ \ \ \ \ \ if\(posts\.length==0\)\ return\ -1;\r\n\ \ \ \ \ \ \ \ HashSet<User>\ freq\ =\ new\ HashSet<User>\(\);\r\n\ \ \ \ \ \ \ \ freq\.add\(posts\[0]\.author\);\r\n\ \ \ \ \ \ \ \ for\(User\ u\ :\ posts\[0]\.commenters\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ freq\.add\(u\);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ for\(int\ i\ =\ 1;\ i\ <\ posts\.length;\ i\+\+\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ HashSet<User>\ curr\ =\ new\ HashSet<User>\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ curr\.add\(posts\[0]\.author\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ for\(User\ u\ :\ posts\[i]\.commenters\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ curr\.add\(u\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ Iterator\ iter\ =\ freq\.iterator\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ while\(iter\.hasNext\(\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\(!curr\.contains\(iter\.next\(\)\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ iter\.remove\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ while\(freq\.size\(\)\ <=\ 1\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ break;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if\(freq\.isEmpty\(\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ -1;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ \(User\)\(freq\.toArray\(\)\)\[0];\r\n\ \ \ \ }\r\n}
recent://bop\ 2\.3\r\n\r\nimport\ java\.util\.HashSet;\r\n\r\npublic\ class\ Solution\ \{\r\n\ \ \ \ //method\ 1\ -\ use\ two\ sets\r\n\ \ \ \ public\ static\ int\ findMostActive\(Post\[]\ posts\)\ \{\r\n\ \ \ \ \ \ \ \ if\(posts\.length==0\)\ return\ -1;\r\n\ \ \ \ \ \ \ \ HashSet<User>\ freq\ =\ new\ HashSet<User>\(\);\r\n\ \ \ \ \ \ \ \ freq\.add\(posts\[0]\.author\);\r\n\ \ \ \ \ \ \ \ for\(User\ u\ :\ posts\[0]\.commenters\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ freq\.add\(u\);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ for\(int\ i\ =\ 1;\ i\ <\ posts\.length;\ i\+\+\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ HashSet<User>\ curr\ =\ new\ HashSet<User>\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ curr\.add\(posts\[0]\.author\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ for\(User\ u\ :\ posts\[i]\.commenters\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ curr\.add\(u\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ Iterator\ iter\ =\ freq\.iterator\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ while\(iter\.hasNext\(\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\(!curr\.contains\(iter\.next\(\)\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ iter\.remove\(\);\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ while\(freq\.size\(\)\ <=\ 1\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ break;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if\(freq\.isEmpty\(\)\)\ \{\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ -1;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ return\ \(User\)\(freq\.toArray\(\)\)\[0];\r\n\ \ \ \ }\r\n}\r\nclass\ Post\ \{\r\n\ \ \ \ User\ author;\r\n\ \ \ \ User\[]\ commenters;\r\n}\r\nclass\ User\ \{\r\n\ \ \ \ int\ id;\r\n}
